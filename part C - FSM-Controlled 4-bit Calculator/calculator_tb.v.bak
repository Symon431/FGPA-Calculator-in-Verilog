module calculator_tb;

    reg clk = 0;
    reg reset, start, enter;
    reg [3:0] data_in;
    reg [2:0] op_code;
    reg [1:0] compute_op;

    wire [7:0] result;
    wire done, negative, div_by_zero;
    wire [6:0] HEX0, HEX1, HEX2;
    wire [2:0] HEX3;  // FSM State

    calculator DUT (
        .clk(clk),
        .reset(reset),
        .start(start),
        .enter(enter),
        .data_in(data_in),
        .op_code(op_code),
        .compute_op(compute_op),
        .HEX0(HEX0), .HEX1(HEX1), .HEX2(HEX2), .HEX3(HEX3),
        .done(done), .negative(negative), .div_by_zero(div_by_zero),
        .result(result)
    );

    always #5 clk = ~clk;

    // Tasks
    task pulse_enter;
        begin
            enter = 1; #10 enter = 0;
        end
    endtask

    task load_A;
        input [3:0] val;
        begin
            op_code = 3'b001;
            data_in = val;
            $display("Time: %0t | Loading A = %0d", $time, val);
            pulse_enter;
            #10;
        end
    endtask

    task load_B;
        input [3:0] val;
        begin
            op_code = 3'b011;
            data_in = val;
            $display("Time: %0t | Loading B = %0d", $time, val);
            pulse_enter;
            #10;
        end
    endtask

    task compute;
        input [1:0] cop;
        input [127:0] label;
        begin
            compute_op = cop;
            op_code = 3'b101;
            $display("Time: %0t | Starting Operation: %s", $time, label);
            #40;
            $display("---- RESULT ----");
            $display("Result   = %b", result);
            $display("HEX2: %b | HEX1: %b | HEX0: %b", HEX2, HEX1, HEX0);
            $display("FSM State = %b (HEX3)", HEX3);
            $display("Done = %b | Negative = %b | Div0 = %b", done, negative, div_by_zero);
            $display("----------------");
        end
    endtask

    initial begin
        $display("======= Simulation Start =======");

        // Initial conditions
        reset = 1; start = 0; enter = 0;
        data_in = 0; op_code = 3'b000; compute_op = 2'b00;
        #20 reset = 0;

        // Start FSM
        start = 1; #10 start = 0;

        // Test: A = 5, B = 2, SUB
        load_A(4'd5);
        load_B(4'd2);
        compute(2'b01, "SUB 5 - 2");

        // Test: A = 3, B = 7, SUB (Expect Negative)
        load_A(4'd3);
        load_B(4'd7);
        compute(2'b01, "SUB 3 - 7");

        // Test: A = 6, B = 3, DIV
        load_A(4'd6);
        load_B(4'd3);
        compute(2'b11, "DIV 6 / 3");

        // Test: B = 0, DIV by 0
        load_B(4'd0);
        compute(2'b11, "DIV 6 / 0");

        $display("======= Simulation End =======");
        $finish;
    end
endmodule
